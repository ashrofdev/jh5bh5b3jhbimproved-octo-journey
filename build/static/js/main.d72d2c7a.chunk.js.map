{"version":3,"sources":["components/2.gif","firebase.js","components/Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseDB","database","Admin","state","route","users","user","payments","isLoading","confirmPayment","e","console","log","ref","concat","_this","userKey","key","update","confirmed","then","catch","reqFull","requstFullscreen","clickdeUser","setState","setTimeout","undefined","Object","entries","forEach","push","objectSpread","_this2","this","on","val","_this3","react_default","a","createElement","className","src","require","map","onClick","username","email","totalInvested","name","date","earnings","href","screenshot","style","width","height","amount","Component","App","search","outcome","Notification","requestPermission","document","querySelectorAll","components_Admin","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d72d2c7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2.edf4241f.gif\";","import firebase from 'firebase/app'\nimport 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/auth'\nimport 'firebase/storage'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbQC-boll7v4GuDs3jffCFaP0BQ-odb00\",\n    authDomain: \"citizeninvestments-98fe8.firebaseapp.com\",\n    databaseURL: \"https://citizeninvestments-98fe8.firebaseio.com\",\n    projectId: \"citizeninvestments-98fe8\",\n    storageBucket: \"citizeninvestments-98fe8.appspot.com\",\n    messagingSenderId: \"664843120935\",\n    appId: \"1:664843120935:web:6f6bbdb7f455f264653902\",\n    measurementId: \"G-1QD1BRXJP4\"\n  };\nfirebase.initializeApp(firebaseConfig);\n\nconst firebaseDB = firebase.database();\n\nexport {\n    firebase,\n    firebaseDB\n}","import React, { Component } from 'react';\nimport { firebase, firebaseDB } from '../firebase'\n\nclass Admin extends Component {\n\n\n    state = {\n        route: 'users',\n        users: [],\n        user: {},\n        payments: [],\n        isLoading: true\n    }\n    \n    componentDidMount(){\n        \n        const users = []\n\n        firebaseDB.ref('users').on('value', e=>{\n            console.log(e.val(), '..............')\n                e.forEach(e=>{\n                    const userKey = e.key\n                    users.push({...e.val(), userKey})\n    \n                })\n            \n            // new Notification('GOOD NEWS', {body: 'Check for changes'})\n            this.setState({users, isLoading: false})\n\n            \n        })\n\n     \n       \n\n           \n    }\n\n    confirmPayment = (e) => {\n        console.log(e)\n        firebaseDB.ref(`users/${this.state.user.userKey}/payments/${e.key}`).update({\n            confirmed: true\n        }).then(e=>{\n            console.log(e)\n        }).catch(e=>{\n            console.log(e)\n        })\n    }\n     \n    reqFull=(e)=>{\n        e.requstFullscreen()\n    }\n\n    clickdeUser=(user)=>{\n        this.setState({\n            route: 'user',\n            user,\n        })\n        setTimeout(() => {\n            if(this.state.user.payments !== undefined) {\n                const payments = []\n                const payment = Object.entries(this.state.user.payments)\n                payment.forEach(e=>{\n                    const key = e[0]\n                    payments.push({...e[1], key})\n                    console.log(e[0])\n                })\n                this.setState({payments})\n    \n            }\n        }, 1000);\n        console.log(user)\n    }\n\n    render() {\n\n            \n            \n                // console.log(this.state.payments)\n        // new Notification('GOOD NEWS', {body: 'CHECKUP'})\n        return (\n            <div className=\"admin\">\n                {\n                    this.state.isLoading?\n                    <img className=\"loading\" src={require('./2.gif')}/>:null\n                }\n                {\n                    this.state.route==='users'?\n                    <div className=\"users\">\n                    {\n                        this.state.users.map(user=>{\n                            return <div className=\"user\" onClick={()=> this.clickdeUser(user)}>\n                                <p>{user.username}</p>\n                                <p>{user.email}</p>\n                                <p>{user.totalInvested}</p>\n                                \n                            </div>\n                        })\n                    } \n                    </div>:\n                    <div className=\"user_page\">\n                        {\n                            this.state.user.payments?\n                                <div>\n                                <div className=\"user top\">\n                                    <p>Username: {this.state.user.username}</p>\n                                    <p>Fullname: {this.state.user.name}</p>\n                                    <p>Date registered: {this.state.user.date}</p>\n                                    <p>Total Invested: {this.state.user.totalInvested}</p>\n                                    <p>Earnings: {this.state.user.earnings}</p>\n                                    \n                                    {/* {\n                                        e.confirmed?\n                                        'CONFIRMED':\n                                        <button onClick={()=>this.confirmPayment(e)}>CONFIRM</button>\n                                    } */}\n                                </div>\n                                <div className=\"payments\">\n                                        <h2>Payments for {this.state.user.username}</h2>\n                                        {\n                                            this.state.payments.map(e=>{\n                                            return <div className=\"user\">\n                                                    <a href={`${e.screenshot}`}><img style={{width:'2rem', height:'2rem'}} src={e.screenshot}/></a>\n                                                    <p>{e.username}</p>\n                                                    <p>{e.amount}</p>\n                                                    <p>{e.date}</p>\n                                                    {\n                                                        e.confirmed?\n                                                        'CONFIRMED':\n                                                        <button onClick={()=>this.confirmPayment(e)}>CONFIRM</button>\n                                                    }\n                                                </div>\n                                            }) \n                                        }\n                                    </div>\n                                </div>\n                            :<h2>No payment history so far</h2>\n                        }\n                    </div>\n                }\n                {/* {\n                    this.state.payments.map(e=>{\n                        return <div className=\"user\">\n                            <a href={`${e.screenshot}`}><img style={{width:'2rem', height:'2rem'}} src={e.screenshot}/></a>\n                            <p>{e.username}</p>\n                            <p>{e.amount}</p>\n                            <p>{e.date}</p>\n                            {\n                                e.confirmed?\n                                'CONFIRMED':\n                                <button onClick={()=>this.confirmPayment(e)}>CONFIRM</button>\n                            }\n                        </div>\n                    })\n                } */}\n            </div>\n        );\n    }\n}\n\nexport default Admin;","import React, {Component} from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css'\nimport Admin from './components/Admin'\n\nclass App extends Component {\n    \n    componentDidMount(){\n      Notification.requestPermission()\n    }\n    state = {\n      search: '',\n      outcome: []\n    }\n\n\n \n  render(){\n    document.querySelectorAll('img').forEach(e=>{\n        console.log('alright')\n    })\n    return (\n      <div>\n        <Admin/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}